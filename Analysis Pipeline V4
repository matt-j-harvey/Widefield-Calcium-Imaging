import numpy as np
import matplotlib.pyplot as plt
import h5py
import tables
from scipy import signal, ndimage
from sklearn.linear_model import LinearRegression
from skimage.morphology import white_tophat

def load_arrays(video_file):
    table = tables.open_file(video_file, mode='r')
    blue_array = table.root.blue
    violet_array = table.root.violet

    return blue_array, violet_array


def restructure_data(array, output_directory):
    print("Restructuring data")

    number_of_images = np.shape(array)[0]
    number_of_pixels = np.shape(array)[1] * np.shape(array)[2]

    chunk_size = 1000
    file_index = 0
    chunk_index = 0

    with h5py.File(output_directory, "w") as f:
        dataset = f.create_dataset("Data", (number_of_pixels, number_of_images), dtype=np.uint8, chunks=True, compression="gzip")

        while file_index < number_of_images:
            chunklet_index = 0
            storage_array = np.zeros((number_of_pixels, chunk_size))

            for chunklet in range(chunk_size):
                print("File Index:", file_index, " For File:", output_directory)

                image_data = array[file_index]
                file = np.ndarray.flatten(image_data)
                storage_array[:, chunklet_index] = file

                file_index += 1
                chunklet_index += 1

            start = chunk_index * chunk_size
            stop = (chunk_index + 1) * chunk_size
            dataset[:, start:stop] = storage_array
            chunk_index += 1


def get_max_projection(array):

    image_shape = [np.shape(array)[1], np.shape(array)[2]]
    number_of_pixels = np.shape(array)[1] * np.shape(array)[2]
    current_max = np.zeros(number_of_pixels)

    for file_index in range(500):
        print(file_index)
        file = array[file_index]
        file = np.ndarray.flatten(file)
        new_array = np.array([current_max, file])
        current_max = np.max(new_array, axis=0)

    max_projection = np.reshape(current_max, image_shape)
    np.save(home_directory + "\\max_projection", max_projection)

    plt.imshow(max_projection)
    plt.show()

def get_mask(fraction):
    image = np.load(home_directory + "\\max_projection.npy")
    image_shape = [np.shape(image)[0], np.shape(image[1])]

    rows        = image_shape[0]
    columns     = np.shape(image)[1]
    max_value   = np.max(image)
    min_value   = np.min(image)
    mask        = np.zeros((rows, columns))
    threshold = ((max_value - min_value) * fraction) + min_value

    for y in range(rows):
        for x in range(columns):
            if image[y][x] > threshold:
                mask[y][x] = 1


    plt.imshow(mask)
    plt.show()
    np.save(home_directory + "\\Mask", mask)



def process_pixels(blue_data, violet_data, output_file):
    print("Processing Pixels")

    # Load Data
    blue_matrix     = h5py.File(blue_data, 'r')
    violet_matrix   = h5py.File(violet_data, 'r')

    number_of_pixels = np.shape(blue_matrix["Data"])[0]
    number_of_images = np.shape(blue_matrix["Data"])[1]

    # Define Chunking Settings
    chunk_size = 10000
    pixel_index = 0
    chunk_index = 0

    # Create Butterwoth Bandpass Filter
    sampling_frequency = 30  # In Hertz
    cutoff_frequency = 8.5  # In Hertz
    w = cutoff_frequency / (sampling_frequency / 2)  # Normalised frequency
    low_cutoff_frequency = 0.1
    w_low = low_cutoff_frequency / (sampling_frequency / 2)
    b, a = signal.butter(2, [w_low, w], 'bandpass')

    with h5py.File(output_file, "w") as f:
        dataset = f.create_dataset("Data", (number_of_pixels, number_of_images), dtype=np.float, chunks=True, compression="gzip")

        while pixel_index < number_of_pixels - 1:
            chunklet_index = 0
            storage_array = np.zeros((chunk_size, number_of_images), dtype=np.float)

            start = chunk_index * chunk_size
            stop = (chunk_index + 1) * chunk_size

            blue_chunk = blue_matrix["Data"][start:stop, :]
            violet_chunk = violet_matrix["Data"][start:stop, :]

            for chunklet in range(chunk_size):
                print("Processing Pixel : ", pixel_index)

                # Load Pixel Traces
                blue_trace = blue_chunk[chunklet_index, :]
                violet_trace = violet_chunk[chunklet_index, :]

                #Apply Lowpass Filter
                blue_trace = signal.filtfilt(b, a, blue_trace)
                violet_trace = signal.filtfilt(b, a, violet_trace)

                # Flatten Traces For Subsequent Processing
                blue_trace = np.reshape(blue_trace, (-1, 1))
                violet_trace = np.reshape(violet_trace, (-1, 1))

                # Scale Violet Trace
                regression = LinearRegression().fit(violet_trace, blue_trace)
                coefficient = regression.coef_
                intercept = regression.intercept_
                shifted_violet_trace = np.add(violet_trace, intercept)
                scaled_violet_trace = np.multiply(shifted_violet_trace, coefficient)

                # Subtract Violet Trace
                subtracted_trace = np.subtract(blue_trace, scaled_violet_trace)
                subtracted_trace = np.add(subtracted_trace, abs(min(subtracted_trace)))

                # Calculate Delta F
                baseline = np.percentile(subtracted_trace, 5)
                delta_f = np.subtract(subtracted_trace, baseline)
                delta_f = np.clip(delta_f, a_min=0, a_max=max(delta_f))
                delta_f_over_f = np.divide(delta_f, baseline)

                #Normalise Trace
                normalised_trace = np.divide(delta_f_over_f, max(delta_f_over_f))
                normalised_trace = np.ndarray.flatten(normalised_trace)

                storage_array[chunklet_index, :] = normalised_trace
                pixel_index += 1
                chunklet_index += 1

            dataset[start:stop, :] = storage_array
            chunk_index += 1


def reconstruct_matrix(processed_file_location, blue_array):

    #Load Mask:
    mask = np.load(home_directory + "\\Mask.npy")

    #Load Processed Data
    processed_data_file = h5py.File(processed_file_location, 'r')
    processed_data = processed_data_file["Data"]
    number_of_files = np.shape(processed_data)[1]
    print("Number of files", number_of_files)

    #Get Original Pixel Dimenions
    image_shape = [np.shape(blue_array)[1], np.shape(blue_array)[2]]
    print("image shape: ", image_shape)

    chunk_size = 100
    chunk_index = 0
    image_index = 0

    while image_index < number_of_files:

        start = chunk_index * chunk_size
        stop = (chunk_index + 1) * chunk_size

        storage_matrix = processed_data [:, start:stop]

        print(np.shape(storage_matrix))

        for chunklet in range(chunk_size):
            print("Image: ", image_index)

            flat_pixels = storage_matrix[:, chunklet]
            #print("Min", min(flat_pixels))
            #print("Max: ", max(flat_pixels))
            image = np.reshape(flat_pixels, image_shape)


            image = ndimage.gaussian_filter(image, 2)
            image = np.multiply(image, mask)

            fig1 = plt.figure(dpi=200)
            ax1 = fig1.add_subplot(111)
            plt.subplots_adjust(0, 0, 1, 1, 0, 0)
            plt.margins(0, 0)
            ax1.axis('off')
            ax1.margins(0, 0)
            ax1.xaxis.set_major_locator(plt.NullLocator())
            ax1.yaxis.set_major_locator(plt.NullLocator())

            ax1.imshow(image, vmin=0, vmax=0.6, cmap="inferno")

            plt.savefig(home_directory + "\\Norm_Images\\" + str(image_index).zfill(6) + ".jpeg", bbox_inches='tight',
                        pad_inches=0)
            plt.close()
            """
            plt.imshow(image, vmin=0, vmax=0.5, cmap="plasma")
            plt.axis('off')
            
            
            """

            image_index += 1
        chunk_index += 1


#Assign File Location
home_directory = r"C:\Widefield Imaging\NRXNR\2020_01_22"
video_file = home_directory + "\Video.h5"
blue_file = home_directory + "\\Blue_Data.hdf5"
violet_file = home_directory + "\\Violet_Data.hdf5"
processed_data_file = home_directory + "\\Processed_Data.hdf5"

#Extract Array Data
blue_array, violet_array = load_arrays(video_file)


#get_max_projection(blue_array)
#get_mask(0.1)

#Restructure Data
#restructure_data(blue_array,    blue_file)
#restructure_data(violet_array,  violet_file)

#Extract Signal
#process_pixels(blue_file, violet_file, processed_data_file)

#Reconstruct Images
reconstruct_matrix(processed_data_file, blue_array)
